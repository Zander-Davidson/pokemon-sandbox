{"version":3,"sources":["sandygast.png","logo.svg","reducers/postReducer.js","reducers/pokemonsReducer.js","reducers/moveReducer.js","reducers/itemsReducer.js","reducers/abilitiesReducer.js","reducers/naturesReducer.js","reducers/userteamsReducer.js","reducers/index.js","actions/types.js","store.js","components/Header.js","components/FetchPokedexData.js","components/Posts.js","actions/postActions.js","components/PostForm.js","actions/userteamsActions.js","components/tools/LoadSpinner.js","components/team-builder/Team.js","components/team-builder/NewTeamForm.js","components/team-builder/NewSetForm.js","components/team-builder/Set.js","components/team-builder/SetView.js","actions/pokemonsActions.js","components/team-builder/PokemonPicker.js","actions/movesActions.js","components/team-builder/MovePicker.js","components/team-builder/TeamView.js","components/team-builder/TeamTesting.js","components/Home.js","components/team-builder/TeamBuilder.js","actions/itemsActions.js","actions/abilitiesActions.js","actions/naturesActions.js","components/DamageCalculator.js","components/pokedex/PokemonTable.js","components/pokedex/Pokedex.js","components/pokedex/MoveTable.js","components/pokedex/Movedex.js","App.js","serviceWorker.js","index.js","components/Utilities.js"],"names":["module","exports","__webpack_require__","p","initialState","items","item","fetching","fetched","activeTeam","combineReducers","posts","state","arguments","length","undefined","action","type","console","log","Object","objectSpread","payload","pokemons","moves","abilities","natures","userteams","map","t","id","teamId","name","newName","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","Header","react_default","a","createElement","className","Navbar","style","padding","expand","react_router_dom","to","src","sandygast","Brand","color","href","Toggle","aria-controls","Collapse","Nav","axios","require","FetchPokedexData","abilityInitUrl","moveInitUrl","pokemonInitUrl","itemInitUrl","insertAbilityEndpoint","insertPokemonEndpoint","insertMoveEndpoint","insertItemEndpoint","_useState","useState","_useState2","slicedToArray","pokemonUrls","setPokemonUrls","_useState3","_useState4","abilityUrls","setAbilityUrls","_useState5","_useState6","moveUrls","setMoveUrls","_useState7","_useState8","itemUrls","setItemUrls","_useState9","_useState10","setPokemons","_useState11","_useState12","setAbilities","_useState13","_useState14","setMoves","_useState15","_useState16","setItems","_useState17","_useState18","isFetching","setIsFetching","_useState19","_useState20","inserting","_fetchAbilityUrls","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","sent","json","results","url","stop","this","_fetchAbilities","_callee4","_context4","Promise","all","_ref","_callee2","u","_context2","then","abrupt","_x","_ref2","_callee3","_context3","description","effect_entries","effect","is_main_series","_x2","catch","e","error","_insertAbilities","_callee5","_context5","t0","post","t1","call","_fetchMoveUrls","_callee6","_context6","m","_fetchMoves","_callee9","_context9","_ref3","_callee7","_context7","_x3","_ref4","_callee8","_context8","effect_chance","category","damage_class","accuracy","power","priority","pp","_x4","_insertMoves","_callee10","_context10","_fetchPokemonUrls","_callee11","_context11","_fetchPokemon","_callee14","_context14","_ref5","_callee12","_context12","_x5","_ref6","_callee13","_context13","ab_1","ab_2","h_ab","forEach","ab","is_hidden","ability","primary_type","types","secondary_type","ability_1","ability_2","hidden_ability","base_hp","stats","base_stat","base_atk","base_def","base_spa","base_spd","base_spe","sprite_link","sprites","front_default","height","weight","_x6","_insertPokemon","_callee15","_context15","pokemon","_fetchItemUrls","_callee16","_context16","i","_fetchItems","_callee19","_context19","_ref7","_callee17","_context17","_x7","_ref8","_callee18","_context18","fling_effect","fling_power","default","_x8","_insertItems","_callee20","_context20","Button","disabled","variant","onClick","fetchAbilityUrls","fetchAbilities","insertAbilities","fetchMoveUrls","fetchMoves","insertMoves","fetchPokemonUrls","fetchPokemon","insertPokemon","fetchItemUrls","fetchItems","insertItems","Posts","props","fetchPosts","nextProps","newPost","unshift","postItems","key","title","body","Component","connect","dispatch","res","PostForm","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","onChange","bind","assertThisInitialized","onSubmit","setState","defineProperty","target","value","preventDefault","createPost","postData","method","headers","content-type","JSON","stringify","endpoint","LoadSpinner","marginTop","Spinner","animation","Team","sets","s","isActive","boxShadow","handleDelete","handleClick","width","display","flexDirection","justifyContent","alignContent","NewTeamForm","textInput","React","createRef","current","focusTextInput","NewTeamForm_NameInput","ref","handleNewTeamBlur","handleNewTeamEnter","NameInput","_this2","focus","_this3","alignItems","fontSize","placeholder","onKeyDown","onBlur","SpeciesInput","handleNewSetEnter","handleNewSetBlur","Set","Typeahead","handleOnBlur","editSet","set","set_id","team_id","team_name","species","nickname","move_1","move_2","move_3","move_4","hp_evs","atk_evs","def_evs","spa_evs","spd_evs","spe_evs","level","handleInputChange","prevProps","event","fontWeight","alt","textAlign","margin","SetView","handleTeamNameChange","teamName","handleSetTabClick","index","activeSetIndex","handlePickerTabClick","activePickerIndex","handleEditSet","newSet","prevState","handleNewSet","concat","toConsumableArray","showNewSet","handleDeleteSet","clickedSetIndex","newTeams","teams","tIndex","activeTeamIndex","sIndex","stopPropagation","newSpecies","nature","enableNewSetBtn","pickerTabs","disableNewSetBtn","speciesInput","opacity","index_es","icon","faPlusCircle","borderRightColor","backgroundColor","Set_Set","editTeam","username","ok","Error","status","fetchPokemons","PokemonPicker","pokemonsFetched","pokemonsFetching","pokemonFetching","MovePicker","movesFetched","movesFetching","TeamView","handleSaveChanges","newSets","oldTeams","oldSets","push","oldTeamIds","deletedTeams","teamNames","includes","oldSetIds","deletedSets","handleSpeciesField","handleAbilityField","handleNatureField","handleItemField","handleMoveField","showNewTeam","showNewTeamBtn","handleTeamClick","clickedTeamIndex","handleDeleteTeam","setIndex","showNewSetBtn","showTypeahead","handleNewTeam","processSets","team","NewTeamForm_NewTeamForm","team_builder_SetView","TeamTesting","setActiveTeam","deleteTeam","createTeam","fetchTeams","newTeamName","Home","components_PostForm","components_Posts","updateSetsEndpoint","TeamBuilder","saveChanges","t2","location","reload","t3","itemsFetched","itemsFetching","naturesFetched","naturesFetching","fetchNatures","fetchData","err","abilitiesFetching","TeamView_TeamView","abilitiesFetched","DamageCalculator","PokemonTable","tableRef","SearchBar","Search","columns","classes","dataField","text","sort","formatter","cell","row","Fragment","type_1_color","type_1","type_2","type_2_color","options","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","nextPageTitle","prePageTitle","firstPageTitle","lastPageTitle","showTotal","paginationTotalRenderer","from","size","disablePageTitle","sizePerPageList","react_bootstrap_table2_toolkit_lib_default","keyField","search","searchProps","lib_default","assign","baseProps","n","condensed","striped","bordered","columnStyle","headerStyle","position","pagination","paginationFactory","Pokedex","MoveTable","type_color","numberFormatter","Movedex","App","react_redux_es","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","titleFormatter","str","charAt","toUpperCase","slice"],"mappings":"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","file":"static/js/main.a9c3e3c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sandygast.0d8a58a9.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { FETCH_POSTS, NEW_POST } from '../actions/types'\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {}\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case FETCH_POSTS:\r\n            console.log('reducer')\r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n        case NEW_POST:\r\n            return {\r\n                ...state,\r\n                item: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { FETCH_POKEMONS, LOADING_POKEMONS } from '../actions/types'\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {},\r\n    fetching: false,\r\n    fetched: false\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case LOADING_POKEMONS:\r\n            return {\r\n                ...state,\r\n                fetching: action.payload\r\n            }\r\n        case FETCH_POKEMONS:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                fetched: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { FETCH_MOVES, LOADING_MOVES } from '../actions/types'\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {},\r\n    fetching: false,\r\n    fetched: false\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case LOADING_MOVES:\r\n            return {\r\n                ...state,\r\n                fetching: action.payload\r\n            }\r\n        case FETCH_MOVES:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                fetched: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { FETCH_ITEMS, LOADING_ITEMS } from '../actions/types'\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {},\r\n    fetching: false,\r\n    fetched: false\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case LOADING_ITEMS:\r\n            return {\r\n                ...state,\r\n                fetching: action.payload\r\n            }\r\n        case FETCH_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                fetched: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { FETCH_ABILITIES, LOADING_ABILITIES } from '../actions/types'\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {},\r\n    fetching: false,\r\n    fetched: false\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case LOADING_ABILITIES:\r\n            return {\r\n                ...state,\r\n                fetching: action.payload\r\n            }\r\n        case FETCH_ABILITIES:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                fetched: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { FETCH_NATURES, LOADING_NATURES } from '../actions/types'\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {},\r\n    fetching: false,\r\n    fetched: false\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case LOADING_NATURES:\r\n            return {\r\n                ...state,\r\n                fetching: action.payload\r\n            }\r\n        case FETCH_NATURES:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                fetched: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { NEW_TEAM, DELETE_TEAM, EDIT_TEAM, FETCH_TEAMS, LOADING_TEAMS, SET_ACTIVE_TEAM } from '../actions/types'\r\n\r\nconst initialState = {\r\n    items: [],\r\n    activeTeam: {},\r\n    fetching: false,\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n\r\n    switch(action.type) {\r\n        // payload: ~true or false~\r\n        case LOADING_TEAMS:\r\n            return {\r\n                ...state,\r\n                fetching: action.payload\r\n            }\r\n        // payload: teams\r\n        case FETCH_TEAMS:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                activeTeam: action.payload == [] ? null : action.payload[0]\r\n            }\r\n        // payload: teams\r\n        case NEW_TEAM:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                activeTeam: state.items[0]\r\n            }\r\n        // payload: {teamId: teamId, newName: teamName}\r\n        case EDIT_TEAM:\r\n            return {\r\n                ...state,\r\n                items: state.items.map(t => {\r\n                    if (t.id === action.payload.teamId)\r\n                        t.name = action.payload.newName\r\n                    return t\r\n                })\r\n            }\r\n        // payload: teamId\r\n        case DELETE_TEAM:\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(t => t.id != action.payload),\r\n                activeTeam: null,\r\n            }            \r\n        case SET_ACTIVE_TEAM:\r\n            return {\r\n                ...state,\r\n                activeTeam: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport postReducer from './postReducer'\r\nimport pokemonsReducer from \"./pokemonsReducer\";\r\nimport moveReducer from \"./moveReducer\";\r\nimport itemsReducer from \"./itemsReducer\";\r\nimport abilitiesReducer from \"./abilitiesReducer\";\r\nimport naturesReducer from \"./naturesReducer\";\r\nimport userteamsReducer from \"./userteamsReducer\"\r\n\r\nexport default combineReducers({\r\n    posts: postReducer,\r\n    pokemons: pokemonsReducer,\r\n    moves: moveReducer,\r\n    items: itemsReducer,\r\n    abilities: abilitiesReducer,\r\n    natures: naturesReducer,\r\n    userteams: userteamsReducer,\r\n})","export const FETCH_POSTS = 'FETCH_POSTS'\r\nexport const NEW_POST = 'NEW_POST'\r\n\r\nexport const FETCH_POKEMONS = 'FETCH_POKEMONS'\r\nexport const LOADING_POKEMONS = 'LOADING_POKEMONS'\r\n\r\nexport const FETCH_MOVES = 'FETCH_MOVES'\r\nexport const LOADING_MOVES = 'LOADING_MOVES'\r\n\r\nexport const FETCH_ITEMS = 'FETCH_ITEMS'\r\nexport const LOADING_ITEMS = 'LOADING_ITEMS'\r\n\r\nexport const FETCH_NATURES = 'FETCH_NATURES'\r\nexport const LOADING_NATURES = 'LOADING_NATURES'\r\n\r\nexport const FETCH_ABILITIES = 'FETCH_ABILITIES'\r\nexport const LOADING_ABILITIES = 'LOADING_ABILITIES'\r\n\r\n// export const FETCH_SETS = 'FETCH_SETS'\r\nexport const LOADING_TEAMS = 'LOADING_TEAMS'\r\nexport const FETCH_TEAMS = 'FETCH_TEAMS'\r\nexport const NEW_SET = 'NEW_SET'\r\nexport const NEW_TEAM = 'NEW_TEAM'\r\nexport const DELETE_SET = 'DELETE_SET'\r\nexport const DELETE_TEAM = 'DELETE_TEAM'\r\nexport const EDIT_SET = 'EDIT_SET'\r\nexport const EDIT_TEAM = 'EDIT_TEAM'\r\nexport const SET_ACTIVE_TEAM = 'SET_ACTIVE_TEAM'\r\n","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {}\r\nconst middleware = [thunk]\r\nconst store = createStore(\r\n    rootReducer, \r\n    initialState, \r\n    compose(\r\n        applyMiddleware(...middleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n)\r\n\r\nexport default store","import React from 'react'\r\nimport { Navbar, Nav, Button, Form, FormControl } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport sandygast from '../sandygast.png'\r\nimport styles from './styles.css'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className='header'>\r\n            <Navbar style={{padding: '0px 0px 0px 0px'}} expand=\"lg\">\r\n                <Link className='a' to=\"/home\"><img className=\"img\" src={sandygast} /></Link>\r\n                <Navbar.Brand style={{color:'white'}} href=\"/home\">Pokemon Sandbox</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Link className='a' to=\"/home\">Home</Link>\r\n                        <Link className='a' to=\"/pokedex\">Pokedex</Link>\r\n                        <Link className='a' to=\"/movedex\">Movedex</Link>\r\n                        <Link className='a' to=\"/team-builder\">Team Builder</Link>\r\n                        <Link className='a' to=\"/insertPokedexData\">Fetch Pokedex Data</Link>\r\n                        {/* <Link className='a' to=\"/damage-calculator\">Damage Calculator</Link> */}\r\n                    </Nav>\r\n                    {/* <Form inline>\r\n                        <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                        <Button variant=\"outline-success\">Search</Button>\r\n                    </Form> */}\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Button } from 'react-bootstrap'\r\n\r\nconst axios = require('axios')\r\n\r\n\r\n// This component fetches pokemon, move, item, and ability data from https://pokeapi.co\r\n// and calls my api to insert the data into by psql database\r\n\r\n// this component is more complicated than it needs to be because I wrote\r\n// it before I understood anything about Promises. So to handle the concurrency issues,\r\n// I used buttons and waited a few seconds in between clicks. i still got all the\r\n// data I needed this way!\r\n\r\nexport default function FetchPokedexData() {\r\n    const abilityInitUrl = 'https://pokeapi.co/api/v2/ability?offset=0&limit=233'  // 233 abilities in main series up to gen 7\r\n    const moveInitUrl = 'https://pokeapi.co/api/v2/move?offset=0&limit=728' // 728 moves in main series to gen 7\r\n    const pokemonInitUrl = 'https://pokeapi.co/api/v2/pokemon?offset=0&limit=807' // 807 pokemon in main series to gen 7 (only plain forms)\r\n    const itemInitUrl = 'https://pokeapi.co/api/v2/item/?offset=0&limit=954' // 954 items\r\n\r\n    const insertAbilityEndpoint = '/api/insertAbility'\r\n    const insertPokemonEndpoint = '/api/insertPokemon'\r\n    const insertMoveEndpoint = '/api/insertMove'\r\n    const insertItemEndpoint = '/api/insertItem'\r\n\r\n    const [pokemonUrls, setPokemonUrls] = useState([])\r\n    const [abilityUrls, setAbilityUrls] = useState([])\r\n    const [moveUrls, setMoveUrls] = useState([])\r\n    const [itemUrls, setItemUrls] = useState([])\r\n\r\n    const [pokemons, setPokemons] = useState([])\r\n    const [abilities, setAbilities] = useState([])\r\n    const [moves, setMoves] = useState([])\r\n    const [items, setItems] = useState([])\r\n\r\n    const [isFetching, setIsFetching] = useState(false);\r\n    const [inserting, setInserting] = useState(\"\")\r\n\r\n    // the init url returns more urls for each page of data\r\n    async function fetchAbilityUrls() {\r\n        setIsFetching(true)\r\n        let response = await fetch(abilityInitUrl)\r\n        let data = await response.json()\r\n        setIsFetching(false)\r\n\r\n        await setAbilityUrls(\r\n            data.results.map(a => {\r\n                return (a.url)\r\n            }))\r\n    }\r\n\r\n    // get the data from the urls to the pages we got above,\r\n    // and format to the json we will send to the api\r\n    async function fetchAbilities() {\r\n        setIsFetching(true)\r\n        Promise.all(abilityUrls.map(async u =>\r\n            await fetch(u)\r\n                .then(response => response.json())\r\n        ))\r\n        .then(async data => {\r\n            await setAbilities(data.map(a => {\r\n                console.log(\"Promises resolved. Formatting ability \" + a.id)\r\n                return {\r\n                    id: a.id,\r\n                    name: a.name,\r\n                    description: a.effect_entries[a.effect_entries.length-1].effect,\r\n                    is_main_series: a.is_main_series\r\n                }\r\n            }))\r\n            await setIsFetching(false)\r\n        })\r\n        .catch(e => {\r\n            console.error('error', e);\r\n        })\r\n    }\r\n\r\n    // send data to the api \r\n    async function insertAbilities() {\r\n        setIsFetching(true)\r\n        await axios\r\n            .post(insertAbilityEndpoint, {\r\n                abilities: abilities\r\n            })\r\n        .then(await setIsFetching(false))\r\n        .catch(e => {\r\n            console.error('error', e);\r\n        })\r\n    }\r\n\r\n\r\n    async function fetchMoveUrls() {\r\n        setIsFetching(true)\r\n        let response = await fetch(moveInitUrl)\r\n        let data = await response.json()\r\n        setIsFetching(false)\r\n\r\n        await setMoveUrls(\r\n            data.results.map(m => {\r\n                return (m.url)\r\n            }))\r\n    }\r\n\r\n    async function fetchMoves() {\r\n        setIsFetching(true)\r\n        Promise.all(moveUrls.map(async u =>\r\n            await fetch(u)\r\n                .then(response => response.json())\r\n        ))\r\n        .then(async data => {\r\n            await setMoves(data.map(m => {\r\n                console.log(\"Promises resolved. Formatting move \" + m.id)\r\n                return {\r\n                    id: m.id,\r\n                    name: m.name,\r\n                    type: m.type.name,\r\n                    effect_chance: m.effect_chance,\r\n                    effect: m.effect_entries[0].effect,\r\n                    category: m.damage_class.name,\r\n                    accuracy: m.accuracy,\r\n                    power: m.power,\r\n                    priority: m.priority,\r\n                    pp: m.pp,\r\n                }\r\n            }))\r\n            await setIsFetching(false)\r\n        })\r\n        .catch(e => {\r\n            console.error('error', e);\r\n        })\r\n    }\r\n\r\n    async function insertMoves() {\r\n        setIsFetching(true)\r\n        await axios\r\n            .post(insertMoveEndpoint, {\r\n                moves: moves\r\n            })\r\n        .then(await setIsFetching(false))\r\n        .catch(e => {\r\n            console.error('error', e);\r\n        })\r\n    }\r\n\r\n\r\n    async function fetchPokemonUrls() {\r\n        setIsFetching(true)\r\n        let response = await fetch(pokemonInitUrl)\r\n        let data = await response.json()\r\n        setIsFetching(false)\r\n\r\n        await setPokemonUrls(\r\n            data.results.map(p => {\r\n                return (p.url)\r\n            }))\r\n    }\r\n\r\n    async function fetchPokemon() {\r\n        setIsFetching(true)\r\n        Promise.all(pokemonUrls.map(async u =>\r\n            await fetch(u)\r\n                .then(response => response.json())\r\n        ))\r\n        .then(async data => {\r\n            await setPokemons(data.map(p => {\r\n                console.log(\"Promises resolved. Formatting pokemon \" + p.id)\r\n\r\n                let ab_1 = null\r\n                let ab_2 = null\r\n                let h_ab = null\r\n\r\n                p.abilities.forEach(ab => {\r\n                    if (ab.is_hidden == true)\r\n                        h_ab = ab.ability.name\r\n                    else if (ab_1 == null)\r\n                        ab_1 = ab.ability.name\r\n                    else if (ab_2 == null)\r\n                        ab_2 = ab.ability.name\r\n                })\r\n\r\n                console.log(ab_1)\r\n                console.log(ab_2)\r\n                console.log(h_ab)\r\n\r\n                return {\r\n                    id: p.id,\r\n                    name: p.name,\r\n                    primary_type: p.types[0].type.name,\r\n                    secondary_type: typeof p.types[1] !== 'undefined' ?\r\n                        p.types[1].type.name : null,\r\n                    ability_1: ab_1,\r\n                    ability_2: ab_2,\r\n                    hidden_ability: h_ab,\r\n                    base_hp: p.stats[5].base_stat,\r\n                    base_atk: p.stats[4].base_stat,\r\n                    base_def: p.stats[3].base_stat,\r\n                    base_spa: p.stats[2].base_stat,\r\n                    base_spd: p.stats[1].base_stat,\r\n                    base_spe: p.stats[0].base_stat,\r\n                    sprite_link: p.sprites.front_default,\r\n                    height: p.height,\r\n                    weight: p.weight\r\n                }\r\n            }))\r\n            await setIsFetching(false)\r\n        })\r\n        .catch(e => {\r\n            console.error('error', e);\r\n        })\r\n    }\r\n\r\n    async function insertPokemon() {\r\n        setIsFetching(true)\r\n        await axios\r\n            .post(insertPokemonEndpoint, {\r\n                pokemon: pokemons\r\n            })\r\n        .then(await setIsFetching(false))\r\n        .catch(e => {\r\n            console.error('error', e);\r\n        })\r\n    }\r\n\r\n\r\n    async function fetchItemUrls() {\r\n        setIsFetching(true)\r\n        let response = await fetch(itemInitUrl)\r\n        let data = await response.json()\r\n        setIsFetching(false)\r\n\r\n        await setItemUrls(\r\n            data.results.map(i => {\r\n                return (i.url)\r\n            }))\r\n    }\r\n\r\n    async function fetchItems() {\r\n        setIsFetching(true)\r\n        Promise.all(itemUrls.map(async u =>\r\n            await fetch(u)\r\n                .then(response => response.json())\r\n        ))\r\n        .then(async data => {\r\n            await setItems(data.map(i => {\r\n                console.log(\"Promises resolved. Formatting item \" + i.id)\r\n                return {\r\n                    id: i.id,\r\n                    name: i.name,\r\n                    effect: i.effect_entries[0].effect,\r\n                    fling_effect: i.fling_effect == null ? null : i.fling_effect.name,\r\n                    fling_power: i.fling_power,\r\n                    sprite_link: i.sprites.default\r\n                }\r\n            }))\r\n            await setIsFetching(false)\r\n        })\r\n        .catch(e => {\r\n            console.error('error', e);\r\n        })\r\n    }\r\n\r\n    async function insertItems() {\r\n        setIsFetching(true)\r\n        await axios\r\n            .post(insertItemEndpoint, {\r\n                items: items\r\n            })\r\n        .then(await setIsFetching(false))\r\n        .catch(e => {\r\n            console.error('error', e);\r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            I will fetch yer data!\r\n            <br />\r\n            <Button disabled variant='primary' onClick={() => {\r\n                fetchAbilityUrls()\r\n            }}>Click me to fetch ability urls</Button>\r\n            <br />\r\n            <Button disabled variant='primary' onClick={() => {\r\n                fetchAbilities()\r\n            }}>Click me to fetch ability data</Button>\r\n            <br />\r\n            <Button disabled variant='primary' onClick={() => {\r\n                insertAbilities()\r\n            }}>Click me to insert abilities into db</Button>\r\n            <br />\r\n\r\n            <br />\r\n            <Button disabled variant='primary' onClick={() => {\r\n                fetchMoveUrls()\r\n            }}>Click me to fetch move urls</Button>\r\n            <br />\r\n            <Button disabled variant='primary' onClick={() => {\r\n                fetchMoves()\r\n            }}>Click me to fetch move data</Button>\r\n            <br />\r\n            <Button disabled variant='primary' onClick={() => {\r\n                insertMoves()\r\n            }}>Click me to insert moves into db</Button>\r\n            <br />\r\n\r\n            <br />\r\n            <Button disabled variant='primary' onClick={() => {\r\n                fetchPokemonUrls()\r\n            }}>Click me to fetch pokemon urls</Button>\r\n            <br />\r\n            <Button disabled variant='primary' onClick={() => {\r\n                fetchPokemon()\r\n            }}>Click me to fetch pokemon data</Button>\r\n            <br />\r\n            <Button disabled variant='primary' onClick={() => {\r\n                insertPokemon()\r\n            }}>Click me to insert pokemon into db</Button>\r\n            <br />\r\n\r\n            <br/>\r\n            <Button disabled variant='primary' onClick={() => {\r\n                fetchItemUrls()\r\n            }}>Click me to fetch item urls</Button>\r\n            <br />\r\n            <Button disabled variant='primary' onClick={() => {\r\n                fetchItems()\r\n            }}>Click me to fetch item data</Button>\r\n            <br />\r\n            <Button disabled variant='primary' onClick={() => {\r\n                insertItems()\r\n            }}>Click me to insert items into db</Button>\r\n            <br />\r\n\r\n            {isFetching ? '\\nfetching...\\n' + inserting : '\\ndone'}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { fetchPosts } from '../actions/postActions'\r\n\r\nclass Posts extends Component {\r\n    componentWillMount() {\r\n        this.props.fetchPosts()\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if(nextProps.newPost) {\r\n            this.props.posts.unshift(nextProps.newPost)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const postItems = this.props.posts.map(post => (\r\n            <div key={post.id}>\r\n                <h3>{post.title}</h3>\r\n                <p>{post.body}</p>\r\n            </div>\r\n        ))\r\n\r\n        return (\r\n            <div>\r\n                <h1>Posts</h1>\r\n                {postItems}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPosts.propTypes = {\r\n    fetchPosts: PropTypes.func.isRequired,\r\n    posts: PropTypes.array.isRequired,\r\n    newPost: PropTypes.object\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    posts: state.posts.items,\r\n    newPost: state.posts.item\r\n})\r\n\r\nexport default connect(mapStateToProps, { fetchPosts })(Posts)","import { FETCH_POSTS, NEW_POST } from './types'\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n    .then(res => res.json())\r\n    .then(posts => dispatch({\r\n        type: FETCH_POSTS,\r\n        payload: posts\r\n    }))\r\n}\r\n\r\nexport const createPost = (postData) => dispatch => {\r\n    fetch('https://jsonplaceholder.typicode.com/posts', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n    .then(res => res.json())\r\n    .then(post => dispatch({\r\n        type: NEW_POST,\r\n        payload: post\r\n    }))\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { createPost } from '../actions/postActions'\r\n\r\nclass PostForm extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            title: '',\r\n            body: ''\r\n        }\r\n\r\n        this.onChange = this.onChange.bind(this)\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault()\r\n        const post = {\r\n            title: this.state.title,\r\n            body: this.state.body\r\n        }\r\n\r\n        this.props.createPost(post)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Add Post</h1>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div>\r\n                        <label>Title: </label><br/>\r\n                        <input type='text' name='title' onChange={this.onChange} value={this.state.title}/>                        \r\n                    </div>\r\n                    <div>\r\n                        <label>Body: </label><br/>\r\n                        <textarea name=\"body\" onChange={this.onChange} value={this.state.body} />                        \r\n                    </div>\r\n                    <br/>\r\n                    <button type='submit'>Submit</button>\r\n                    <br/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPostForm.propTypes = {\r\n    createPost: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null, { createPost })(PostForm)\r\n","import { NEW_TEAM, DELETE_TEAM, EDIT_TEAM, FETCH_TEAMS, LOADING_TEAMS, SET_ACTIVE_TEAM } from './types'\r\n\r\nconst username = 'ana'\r\nconst endpoint = '/api/userTeams/'\r\n\r\nexport const fetchTeams = () => dispatch => {\r\n    dispatch({\r\n        type: LOADING_TEAMS,\r\n        payload: true\r\n    })\r\n    fetch(endpoint + '?username=' + username)\r\n    .then(res => {\r\n        if (!res.ok)\r\n            throw new Error(`status ${res.status}`);\r\n        return res.json();\r\n    })\r\n    .then(json => {\r\n        dispatch({\r\n            type: FETCH_TEAMS,\r\n            payload: json.results.teams\r\n        })\r\n        dispatch({\r\n            type: LOADING_TEAMS,\r\n            payload: false\r\n        })\r\n    })\r\n    .catch(e => {\r\n        console.log(`API call failed: ${e}`);\r\n    })\r\n}\r\n\r\nexport const createTeam = (newTeamName) => dispatch => {\r\n    fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            username: username,\r\n            newTeamName: newTeamName,\r\n        })\r\n    })\r\n    .then(res => {\r\n        if (!res.ok)\r\n            throw new Error(`status ${res.status}`);\r\n        return res.json();\r\n    })\r\n    .then(json => dispatch({\r\n        type: NEW_TEAM,\r\n        payload: json.results.teams\r\n    }))\r\n    .catch(e => {\r\n        console.log(`API call failed: ${e}`);\r\n    })\r\n}\r\n\r\nexport const deleteTeam = (teamId) => dispatch => {\r\n    fetch(endpoint, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            username: username,\r\n            teamId: teamId,\r\n        })\r\n    })\r\n    .then(res => {\r\n        if (!res.ok)\r\n            throw new Error(`status ${res.status}`);\r\n    })\r\n    .then(() => {\r\n        dispatch({\r\n            type: DELETE_TEAM,\r\n            payload: teamId\r\n        })\r\n    })\r\n    .catch(e => {\r\n        console.log(`API call failed: ${e}`);\r\n    })\r\n}\r\n\r\n// a new name for an existing team\r\nexport const editTeam = (teamId, newName) => dispatch => {\r\n    fetch(endpoint, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            username: username,\r\n            teamId: teamId,\r\n            newName: newName,\r\n        })\r\n    })\r\n    .then(res => {\r\n        if (!res.ok)\r\n            throw new Error(`status ${res.status}`);\r\n    })\r\n    .then(() => {\r\n        dispatch({\r\n            type: EDIT_TEAM,\r\n            payload: {teamId: teamId, newName: newName}\r\n        })\r\n    })\r\n    .catch(e => {\r\n        console.log(`API call failed: ${e}`);\r\n    })\r\n}\r\n\r\nexport const setActiveTeam = (team) => dispatch => {\r\n    dispatch({\r\n        type: SET_ACTIVE_TEAM,\r\n        payload: team\r\n    })\r\n}","import React from 'react'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\nexport default function LoadSpinner() {\r\n\r\n    const variant = 'info'\r\n    const style = {\r\n        marginTop: '15%'\r\n    }\r\n\r\n    return (\r\n        <div style={style}>\r\n            <Spinner animation=\"border\" variant={variant} />\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport styles from './teambuilder-styles.css'\r\n\r\nexport default function Team(props) {\r\n\r\n    let name = props.name\r\n    let sprites = props.sets == null ? null :\r\n        props.sets.map(s => {\r\n            return <img className='team-sprite' src={s.sprite_link}/>\r\n        })\r\n\r\n    return (\r\n        <div\r\n            className='team-wrapper'\r\n            style={props.isActive ? {boxShadow: \"0px 0px 7px 1px rgba(146,49,255,0.68)\"} : null}\r\n        >\r\n            <button onClick={props.handleDelete} className='delete-btn' ><div className='rotated-text'>Delete</div></button>\r\n            <div onClick={props.handleClick} style={{width: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignContent: 'center'}}>\r\n                <div>\r\n                    {name}\r\n                </div>\r\n                <div style={{width: '100%', display: 'flex', flexDirection: 'row', justifyContent: 'flex-start'}}>\r\n                    {sprites}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class NewTeamForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.textInput = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.textInput.current.focusTextInput()\r\n    }\r\n\r\n    render() {\r\n        return <NameInput ref={this.textInput} handleNewTeamBlur={this.props.handleNewTeamBlur} handleNewTeamEnter={this.props.handleNewTeamEnter}/>\r\n    }\r\n}\r\n\r\nclass NameInput extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.textInput = React.createRef();\r\n        this.focusTextInput = this.focusTextInput.bind(this)\r\n    }\r\n\r\n    focusTextInput() {\r\n        // Explicitly focus the text input using the raw DOM API\r\n        // Note: we're accessing \"current\" to get the DOM node\r\n        this.textInput.current.focus();\r\n    }\r\n\r\n    render() {\r\n        let value\r\n        \r\n        return (\r\n            <form className='team-wrapper' style={{flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}} >\r\n                <input\r\n                    ref={this.textInput}\r\n                    type='text'\r\n                    value={value}\r\n                    style={{\r\n                        fontSize: 'small',\r\n                        height: '25px', \r\n                        width: '170px'}}\r\n                    placeholder='team name'\r\n                    onKeyDown={e => this.props.handleNewTeamEnter(e)}\r\n                    onBlur={e => this.props.handleNewTeamBlur(e)}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class NewSetForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.textInput = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.textInput.current.focusTextInput()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <SpeciesInput \r\n                ref={this.textInput} \r\n                handleNewSetBlur={this.props.handleNewSetBlur} \r\n                handleNewSetEnter={this.props.handleNewSetEnter}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nclass SpeciesInput extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.textInput = React.createRef();\r\n        this.focusTextInput = this.focusTextInput.bind(this)\r\n    }\r\n\r\n    focusTextInput() {\r\n        // Explicitly focus the text input using the raw DOM API\r\n        // Note: we're accessing \"current\" to get the DOM node\r\n        this.textInput.current.focus();\r\n    }\r\n\r\n    render() {\r\n        let value\r\n        \r\n        return (\r\n            <form className='set-wrapper' style={{ padding: '7px', flexDirection: 'column', alignItems: 'center', justifyContent: 'center'}} >\r\n                <img \r\n                    src='//cdn.bulbagarden.net/upload/a/a1/Substitute_artwork.png'\r\n                    style={{height: '110px', width: '110px'}}\r\n                />\r\n\r\n                Pokemon\r\n                <input\r\n                    ref={this.textInput}\r\n                    type='text'\r\n                    value={value}\r\n                    style={{\r\n                        fontSize: 'small',\r\n                        height: '25px', \r\n                        width: '170px'}}\r\n                    placeholder='species'\r\n                    onKeyDown={e => this.props.handleNewSetEnter(e)}\r\n                    onBlur={e => this.props.handleNewSetBlur(e)}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}","import React, { Component, useState, useEffect } from 'react'\r\nimport { titleFormatter as title } from '../Utilities'\r\n// import Typeahead from 'react-typeahead'\r\n\r\nvar Typeahead = require('react-typeahead').Typeahead;\r\n\r\n\r\nexport default class Set extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            set: {\r\n                set_id: props.set.set_id == null ? '' : props.set.set_id,\r\n                team_id: props.set.team_id == null ? '' : props.set.team_id,\r\n                team_name: props.set.team_name == null ? '' : props.set.team_name,\r\n                species: props.set.species == null ? '' : props.set.species,\r\n                nickname: props.set.nickname == null ? '' : props.set.nickname,\r\n                ability: props.set.ability == null ? '' : props.set.ability,\r\n                item: props.set.item == null ? '' : props.set.item,\r\n                move_1: props.set.move_1 == null ? '' : props.set.move_1,\r\n                move_2: props.set.move_2 == null ? '' : props.set.move_2,\r\n                move_3: props.set.move_3 == null ? '' : props.set.move_3,\r\n                move_4: props.set.move_4 == null ? '' : props.set.move_4,\r\n                hp_evs: props.set.hp_evs == null ? '' : props.set.hp_evs,\r\n                atk_evs: props.set.atk_evs == null ? '' : props.set.atk_evs,\r\n                def_evs: props.set.def_evs == null ? '' : props.set.def_evs,\r\n                spa_evs: props.set.spa_evs == null ? '' : props.set.spa_evs,\r\n                spd_evs: props.set.spd_evs == null ? '' : props.set.spd_evs,\r\n                spe_evs: props.set.spe_evs == null ? '' : props.set.spe_evs,\r\n                level: props.set.level == null ? '' : props.set.level,\r\n                sprite_link: props.set.sprite_link == null ? '' : props.set.sprite_link,\r\n            }\r\n        }\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this)\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps != this.props) {\r\n            this.setState({\r\n                set: {\r\n                    set_id: this.props.set.set_id == null ? '' : this.props.set.set_id,\r\n                    team_id: this.props.set.team_id == null ? '' : this.props.set.team_id,\r\n                    team_name: this.props.set.team_name == null ? '' : this.props.set.team_name,\r\n                    species: this.props.set.species == null ? '' : this.props.set.species,\r\n                    nickname: this.props.set.nickname == null ? '' : this.props.set.nickname,\r\n                    ability: this.props.set.ability == null ? '' : this.props.set.ability,\r\n                    item: this.props.set.item == null ? '' : this.props.set.item,\r\n                    move_1: this.props.set.move_1 == null ? '' : this.props.set.move_1,\r\n                    move_2: this.props.set.move_2 == null ? '' : this.props.set.move_2,\r\n                    move_3: this.props.set.move_3 == null ? '' : this.props.set.move_3,\r\n                    move_4: this.props.set.move_4 == null ? '' : this.props.set.move_4,\r\n                    hp_evs: this.props.set.hp_evs == null ? '' : this.props.set.hp_evs,\r\n                    atk_evs: this.props.set.atk_evs == null ? '' : this.props.set.atk_evs,\r\n                    def_evs: this.props.set.def_evs == null ? '' : this.props.set.def_evs,\r\n                    spa_evs: this.props.set.spa_evs == null ? '' : this.props.set.spa_evs,\r\n                    spd_evs: this.props.set.spd_evs == null ? '' : this.props.set.spd_evs,\r\n                    spe_evs: this.props.set.spe_evs == null ? '' : this.props.set.spe_evs,\r\n                    level: this.props.set.level == null ? '' : this.props.set.level,\r\n                    sprite_link: this.props.set.sprite_link == null ? '' : this.props.set.sprite_link,\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        var set = { ...this.state.set }\r\n        set[name] = value\r\n        this.setState({ set })\r\n    }\r\n\r\n    handleOnBlur = () => {\r\n        this.props.editSet(this.state.set)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='set-wrapper' onBlur={this.handleOnBlur}>\r\n                <div className='set-field-area'>\r\n                    <div style={{ fontWeight: 'bold' }}>Nickname</div>\r\n                    <input name='nickname' type='text' value={this.state.set.nickname} onChange={this.handleInputChange} className='set-field' />\r\n                </div>\r\n\r\n                <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\r\n                    <img className='set-sprite' src={this.state.set.sprite_link} alt={this.state.set.species} />\r\n                    <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                        <div className='set-field-area'>[type]---[type]</div>\r\n                        <div className='set-field-area'>\r\n                            <div style={{ fontWeight: 'bold' }}>Level</div>\r\n                            <input name='level' type='text' value={this.state.set.level} onChange={this.handleInputChange} className='set-field' style={{ width: '30px', textAlign: 'center' }} />\r\n                        </div>\r\n                        <div className='set-field-area'>\r\n                            <div style={{ fontWeight: 'bold' }}>Gender</div>\r\n                            <input name='gender' type='text' className='set-field' style={{ width: '30px', textAlign: 'center' }} />\r\n                        </div>\r\n                        <div className='set-field-area'>\r\n                            <div style={{ fontWeight: 'bold' }}>Shiny</div>\r\n                            <input name='shiny' type='text' className='set-field' style={{ width: '30px', textAlign: 'center' }} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='set-field-area'>\r\n                    <div style={{ fontWeight: 'bold' }}>Pokemon</div>\r\n                    <input name='species' type='text' value={this.state.set.species} onChange={this.handleInputChange} className='set-field' />\r\n                </div>\r\n                <div className='set-field-area'>\r\n                    <div style={{ fontWeight: 'bold' }}>Ability</div>\r\n                    <input name='ability' type='text' value={this.state.set.ability} onChange={this.handleInputChange} className='set-field' />\r\n                </div>\r\n                <div className='set-field-area'>\r\n                    <div style={{ fontWeight: 'bold' }}>Item</div>\r\n                    <input name='item' type='text' value={this.state.set.item} onChange={this.handleInputChange} className='set-field' />\r\n                </div>\r\n\r\n                <div style={{ margin: '10px 0px 10px 0px' }}>\r\n                    <div className='set-field-area'>\r\n                        <div style={{ fontWeight: 'bold' }}>Moves</div><div>[coverage rating]</div>\r\n                    </div>\r\n                    <div className='set-field-area'>\r\n                        [type]<input name='move_1' type='text' value={this.state.set.move_1} onChange={this.handleInputChange} className='set-field' />\r\n                    </div>\r\n                    <div className='set-field-area'>\r\n                        [type]<input name='move_2' type='text' value={this.state.set.move_2} onChange={this.handleInputChange} className='set-field' />\r\n                    </div>\r\n                    <div className='set-field-area'>\r\n                        [type]<input name='move_3' type='text' value={this.state.set.move_3} onChange={this.handleInputChange} className='set-field' />\r\n                    </div>\r\n                    <div className='set-field-area'>\r\n                        [type]<input name='move_4' type='text' value={this.state.set.move_4} onChange={this.handleInputChange} className='set-field' />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={'set-stat-box'}>\r\n                    [stats]\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { editTeam } from '../../actions/userteamsActions'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport Set from './Set'\r\nimport styles from './teambuilder-styles.css'\r\nimport NewSetForm from './NewSetForm'\r\n\r\nconst brightGhost = '#f0e9f7'\r\n\r\nclass SetView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        console.log(props.activeTeam)\r\n        this.state = {\r\n            teamName: props.activeTeam.name,\r\n            sets: props.sets,\r\n            pickerTabs: ['Pokemon', 'Moves', 'Abilities', 'Stats'],\r\n            activeSetIndex: null,\r\n            activePickerIndex: 0,\r\n            showNewSet: false,\r\n            disableNewSetBtn: false,\r\n        }\r\n\r\n        this.speciesInput = React.createRef();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({\r\n            teamName: nextProps.activeTeam.name,\r\n            disableNewSetBtn: nextProps.activeTeam.sets.length >= 6\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps != this.props) {\r\n            if (this.props.sets.length > 0) {\r\n                this.setState({\r\n                    activeSetIndex: 0,\r\n                    sets: this.props.sets,\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    activeSetIndex: null,\r\n                    sets: this.props.sets\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let disableNewSetBtn = this.state.disableNewSetBtn\r\n\r\n        return (\r\n            <span className='setview'>\r\n\r\n                <div className={'set-tabs-wrapper'}>\r\n                    \r\n                    <button onClick={this.handleNewSet} disabled={disableNewSetBtn} className='btn-newset' style={disableNewSetBtn ? {opacity: '0.5'} : null}><FontAwesomeIcon icon={faPlusCircle} /></button>\r\n                    {this.state.activeSetIndex != null ?\r\n                        this.state.sets.map((s, index) => {\r\n                            return (\r\n                                <div\r\n                                    className='set-tab'\r\n                                    style={index === this.state.activeSetIndex ? { \r\n                                        boxShadow: \"0px 0px 7px 1px rgba(146,49,255,0.68)\", \r\n                                        borderRightColor: brightGhost, \r\n                                        backgroundColor: brightGhost } \r\n                                    : null}\r\n                                    onClick={() => this.handleSetTabClick(index)}\r\n                                >\r\n                                    {<img style={{ height: '70px', width: '70px' }} src={s.sprite_link} alt={s.species} />}\r\n                                </div>\r\n                            )\r\n                        }) \r\n                    : null}\r\n                </div>\r\n\r\n                <div className='picker-wrapper'>\r\n                    <div className='picker-header-wrapper'>\r\n                        <div className='set-field-area' style={{ justifyContent: 'left', width: 'fit-content' }}>\r\n                            <div style={{ fontWeight: 'bold' }}>Team</div>\r\n                            <input name='teamName' type='text' value={this.state.teamName} onChange={this.handleTeamNameChange} className='set-field' />\r\n                        </div>\r\n                        <div className='picker-tabs-wrapper'>\r\n                            {this.state.pickerTabs.map((p, index) => {\r\n                                return (\r\n                                    <div\r\n                                        className='picker-tab'\r\n                                        style={index === this.state.activePickerIndex ? { boxShadow: \"0px 0px 7px 1px rgba(146,49,255,0.68)\", borderRightColor: brightGhost, backgroundColor: brightGhost } : null}\r\n                                        onClick={() => this.handlePickerTabClick(index)}\r\n                                    >\r\n                                        {p}\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='picker-content-wrapper'>\r\n                        {this.state.activeSetIndex != null ?\r\n                            <Set \r\n                                set={this.state.sets[this.state.activeSetIndex]}\r\n                                editSet={this.handleEditSet}\r\n                             /> : null}\r\n                    </div>\r\n                </div>\r\n\r\n            </span>\r\n        )\r\n    }\r\n\r\n    handleTeamNameChange = (event) => {\r\n        let newName = event.target.value\r\n        this.setState({\r\n            teamName: newName\r\n        })\r\n        // this.props.editTeam(newName)\r\n    }\r\n \r\n    handleSetTabClick = (index) => {\r\n        this.setState({ activeSetIndex: index })\r\n    }\r\n\r\n    handlePickerTabClick = (index) => {\r\n        this.setState({\r\n            activePickerIndex: index\r\n        })\r\n    }\r\n\r\n    handleEditSet = (newSet) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                sets: prevState.sets.map((s, index) => {\r\n                if (index === prevState.activeSetIndex) {\r\n                    return newSet\r\n                } else\r\n                    return s\r\n            })}\r\n          });\r\n    }\r\n\r\n    handleNewSet = () => {\r\n        this.setState(prevState => {\r\n            let newSet = {\r\n                set_id: -1,\r\n                sprite_link: '//cdn.bulbagarden.net/upload/a/a1/Substitute_artwork.png'\r\n            }\r\n\r\n            return {\r\n                sets : prevState.sets.length === 0 ?\r\n                    [newSet] : [newSet, ...prevState.sets],\r\n                activeSetIndex: 0\r\n            }\r\n        })\r\n    }\r\n\r\n    handleNewSetBlur = (event) => {\r\n        this.setState({ showNewSet: false })\r\n    }\r\n\r\n    handleDeleteSet = (clickedSetIndex) => {\r\n        let newTeams = this.state.teams.map((t, tIndex) => {\r\n            if (tIndex === this.state.activeTeamIndex) {\r\n                return {\r\n                    id: t.id,\r\n                    name: t.name,\r\n                    sets: t.sets.filter((s, sIndex) => sIndex !== clickedSetIndex)\r\n                }\r\n            }\r\n            else\r\n                return t\r\n        })\r\n\r\n        this.setState({\r\n            teams: newTeams\r\n        })\r\n    }\r\n\r\n    handleNewSetEnter = (event) => {\r\n        if (event.key === 'Enter') {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n\r\n            let newSpecies = event.target.value\r\n            let newTeams = this.state.teams.map((t, tIndex) => {\r\n                if (tIndex === this.state.activeTeamIndex) {\r\n                    t.sets = [{\r\n                        set_id: null,\r\n                        species: newSpecies,\r\n                        nickname: null,\r\n                        nature: 'bashful',\r\n                        ability: null,\r\n                        item: null,\r\n                        move_1: null,\r\n                        move_2: null,\r\n                        move_3: null,\r\n                        move_4: null,\r\n                        hp_evs: 0,\r\n                        atk_evs: 0,\r\n                        def_evs: 0,\r\n                        spa_evs: 0,\r\n                        spd_evs: 0,\r\n                        spe_evs: 0,\r\n                        level: 100,\r\n                        sprite_link: null,\r\n                        team_name: t.name,\r\n                        team_id: t.id\r\n                    }, ...t.sets]\r\n                }\r\n                else\r\n                    return t\r\n            })\r\n\r\n            this.setState(prevState => {\r\n                return {\r\n                    showNewSet: false,\r\n                    enableNewSetBtn: true,\r\n                    // teams: newTeams//[{name: newName, sets: null}, ...prevState.teams]\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nSetView.propTypes = {\r\n    editTeam: PropTypes.func.isRequired,\r\n    teams: PropTypes.array.isRequired,\r\n    activeTeam: PropTypes.object.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    activeTeam: state.userteams.activeTeam,\r\n    teams: state.userteams.items\r\n})\r\n\r\nexport default connect(mapStateToProps, { editTeam })(SetView)","import { FETCH_POKEMONS, LOADING_POKEMONS } from './types'\r\n\r\nconst fetchPokesUrl = \"/api/getAllPokemon\"\r\n\r\nexport const fetchPokemons = () => dispatch => {\r\n    console.log('pokemon action')\r\n    dispatch({\r\n        type: LOADING_POKEMONS,\r\n        payload: true\r\n    })\r\n    fetch(fetchPokesUrl)\r\n    .then(res => {\r\n        if (!res.ok)\r\n            throw new Error(`status ${res.status}`);\r\n        return res.json();\r\n    })\r\n    .then(pokemons => {\r\n        dispatch({\r\n            type: FETCH_POKEMONS,\r\n            payload: pokemons.results\r\n        })\r\n        dispatch({\r\n            type: LOADING_POKEMONS,\r\n            payload: false\r\n        })\r\n    })\r\n    .catch(e => {\r\n        console.log(`API call failed: ${e}`);\r\n    })\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { fetchPokemons } from '../../actions/pokemonsActions'\r\nimport LoadSpinner from '../tools/LoadSpinner'\r\n\r\nclass PokemonPicker extends Component {\r\n    componentWillMount() {\r\n        if (!this.props.pokemonsFetched && !this.props.pokemonsFetching)\r\n            this.props.fetchPokemons() \r\n    }\r\n\r\n    render() {\r\n        let content = this.props.pokemonFetching ?\r\n            <LoadSpinner/> :\r\n            <div>\r\n                Pokemon picker\r\n            </div>\r\n\r\n        return content\r\n    }\r\n}\r\n\r\nPokemonPicker.propTypes = {\r\n    fetchPokemons: PropTypes.func.isRequired,\r\n    pokemons: PropTypes.array.isRequired,\r\n    pokemonsFetching: PropTypes.bool.isRequired,\r\n    pokemonsFetched: PropTypes.bool.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    pokemons: state.pokemons.items,\r\n    pokemonsFetching: state.pokemons.fetching,\r\n    pokemonsFetched: state.pokemons.fetched,\r\n})\r\n\r\nexport default connect(mapStateToProps, { fetchPokemons })(PokemonPicker)\r\n\r\n// import React, { useState, useEffect} from 'react'\r\n// import BootstrapTable from 'react-bootstrap-table-next';\r\n// // import paginationFactory from 'react-bootstrap-table2-paginator';\r\n// // import cellEditFactory from 'react-bootstrap-table2-editor';\r\n// // import filterFactory, { textFilter, Comparator } from 'react-bootstrap-table2-filter';\r\n\r\n\r\n// const columns = [{\r\n//   dataField: 'id',\r\n//   text: 'Product ID',\r\n//   sort: true\r\n// }, {\r\n//   dataField: 'name',\r\n//   text: 'Product Name',\r\n//   filter: textFilter({\r\n//     defaultValue: '8'\r\n//   }),\r\n//   sort: true\r\n// }, {\r\n//   dataField: 'price',\r\n//   text: 'Product Price',\r\n//   filter: textFilter(),\r\n//   sort: true\r\n// }];\r\n\r\n// const defaultSorted = [{\r\n//   dataField: 'name',\r\n//   order: 'desc'\r\n// }];\r\n\r\n// const cellEditProps = {\r\n//   mode: 'click'\r\n// };\r\n\r\n// const RemoteAll = ({ data, page, sizePerPage, onTableChange, totalSize }) => (\r\n//   <div>\r\n//     <BootstrapTable\r\n//       remote\r\n//       keyField=\"id\"\r\n//       data={ data }\r\n//       columns={ columns }\r\n//       defaultSorted={ defaultSorted }\r\n//       filter={ filterFactory() }\r\n//       pagination={ paginationFactory({ page, sizePerPage, totalSize }) }\r\n//       cellEdit={ cellEditFactory(cellEditProps) }\r\n//       onTableChange={ onTableChange }\r\n//     />\r\n//     <Code>{ sourceCode }</Code>\r\n//   </div>\r\n// );\r\n\r\n// RemoteAll.propTypes = {\r\n//   data: PropTypes.array.isRequired,\r\n//   page: PropTypes.number.isRequired,\r\n//   totalSize: PropTypes.number.isRequired,\r\n//   sizePerPage: PropTypes.number.isRequired,\r\n//   onTableChange: PropTypes.func.isRequired\r\n// };\r\n\r\n// class Container extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       page: 1,\r\n//       data: products.slice(0, 10),\r\n//       totalSize: products.length,\r\n//       sizePerPage: 10\r\n//     };\r\n//     this.handleTableChange = this.handleTableChange.bind(this);\r\n//   }\r\n\r\n//   handleTableChange = (type, { page, sizePerPage, filters, sortField, sortOrder, cellEdit }) => {\r\n//     const currentIndex = (page - 1) * sizePerPage;\r\n//     setTimeout(() => {\r\n//       // Handle cell editing\r\n//       if (type === 'cellEdit') {\r\n//         const { rowId, dataField, newValue } = cellEdit;\r\n//         products = products.map((row) => {\r\n//           if (row.id === rowId) {\r\n//             const newRow = { ...row };\r\n//             newRow[dataField] = newValue;\r\n//             return newRow;\r\n//           }\r\n//           return row;\r\n//         });\r\n//       }\r\n//       let result = products;\r\n\r\n//       // Handle column filters\r\n//       result = result.filter((row) => {\r\n//         let valid = true;\r\n//         for (const dataField in filters) {\r\n//           const { filterVal, filterType, comparator } = filters[dataField];\r\n\r\n//           if (filterType === 'TEXT') {\r\n//             if (comparator === Comparator.LIKE) {\r\n//               valid = row[dataField].toString().indexOf(filterVal) > -1;\r\n//             } else {\r\n//               valid = row[dataField] === filterVal;\r\n//             }\r\n//           }\r\n//           if (!valid) break;\r\n//         }\r\n//         return valid;\r\n//       });\r\n//       // Handle column sort\r\n//       if (sortOrder === 'asc') {\r\n//         result = result.sort((a, b) => {\r\n//           if (a[sortField] > b[sortField]) {\r\n//             return 1;\r\n//           } else if (b[sortField] > a[sortField]) {\r\n//             return -1;\r\n//           }\r\n//           return 0;\r\n//         });\r\n//       } else {\r\n//         result = result.sort((a, b) => {\r\n//           if (a[sortField] > b[sortField]) {\r\n//             return -1;\r\n//           } else if (b[sortField] > a[sortField]) {\r\n//             return 1;\r\n//           }\r\n//           return 0;\r\n//         });\r\n//       }\r\n//       this.setState(() => ({\r\n//         page,\r\n//         data: result.slice(currentIndex, currentIndex + sizePerPage),\r\n//         totalSize: result.length,\r\n//         sizePerPage\r\n//       }));\r\n//     }, 2000);\r\n//   }\r\n\r\n//   render() {\r\n//     const { data, sizePerPage, page } = this.state;\r\n//     return (\r\n//       <RemoteAll\r\n//         data={ data }\r\n//         page={ page }\r\n//         sizePerPage={ sizePerPage }\r\n//         totalSize={ this.state.totalSize }\r\n//         onTableChange={ this.handleTableChange }\r\n//       />\r\n//     );\r\n//   }\r\n// }","import { FETCH_MOVES, LOADING_MOVES } from './types'\r\n\r\nconst fetchMovesUrl = \"/api/getAllMoves\"\r\n\r\nexport const fetchMoves = () => dispatch => {\r\n    dispatch({\r\n        type: LOADING_MOVES,\r\n        payload: true\r\n    })\r\n    fetch(fetchMovesUrl)\r\n    .then(res => {\r\n        if (!res.ok)\r\n            throw new Error(`status ${res.status}`);\r\n        return res.json();\r\n    })\r\n    .then(moves => {\r\n        dispatch({\r\n            type: FETCH_MOVES,\r\n            payload: moves.results\r\n        })\r\n        dispatch({\r\n            type: LOADING_MOVES,\r\n            payload: false\r\n        })\r\n    })\r\n    .catch(e => {\r\n        console.log(`API call failed: ${e}`);\r\n    })\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { fetchMoves } from '../../actions/movesActions'\r\nimport LoadSpinner from '../tools/LoadSpinner'\r\n\r\nclass MovePicker extends Component {\r\n    componentWillMount() {\r\n        if (!this.props.movesFetched && !this.props.movesFetching)\r\n            this.props.fetchMoves()\r\n    }\r\n\r\n    render() {\r\n        let content = this.props.movesFetching ?\r\n            <LoadSpinner/> :\r\n            <div>\r\n                Move picker\r\n            </div>\r\n\r\n        return content\r\n    }\r\n}\r\n\r\nMovePicker.propTypes = {\r\n    fetchMoves: PropTypes.func.isRequired,\r\n    moves: PropTypes.array.isRequired,\r\n    movesFetching: PropTypes.bool.isRequired,\r\n    movesFetched: PropTypes.bool.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    moves: state.moves.items,\r\n    movesFetching: state.moves.fetching,\r\n    movesFetched: state.moves.fetched,\r\n})\r\n\r\nexport default connect(mapStateToProps, { fetchMoves })(MovePicker)","import React, { Component } from 'react'\r\nimport Team from './Team'\r\nimport { Button } from 'react-bootstrap'\r\nimport NewTeamForm from './NewTeamForm'\r\nimport NewSetForm from './NewSetForm'\r\nimport { titleFormatter as title } from '../Utilities'\r\nimport styles from './teambuilder-styles.css'\r\nimport SetView from './SetView'\r\nimport Set from './Set'\r\nimport DataView from './DataView'\r\nimport update from 'immutability-helper'\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\n\r\n// this component is messy and can be broken up a bit (and commented)\r\n// it's mostly event handlers\r\n\r\nexport default class TeamView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            activeTeamIndex: 0, // index of team we are currently editing\r\n            activeSetIndex: null,\r\n            teams: [],\r\n            showNewTeamBtn: true,\r\n            showNewTeam: false,\r\n            showNewSetBtn: true,\r\n            showNewSet: false,\r\n            showTypeahead: false,\r\n        }\r\n        this.handleNewTeam = this.handleNewTeam.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.processSets(this.props.sets, this.props.teamNames)\r\n    }\r\n\r\n    processSets(sets, teamNames) {\r\n        let teams = []\r\n        let currTeamName = sets[0].team\r\n        let j = 0\r\n        let currTeamId = teamNames[j].id\r\n        let currTeam = { id: currTeamId, name: currTeamName, sets: [] }\r\n\r\n        teamNames.forEach(t => {\r\n            teams.push({\r\n                id: t.id,\r\n                name: t.name,\r\n                sets: sets.filter(s => {\r\n                    return s.team_id === t.id\r\n                })\r\n            })\r\n        })\r\n\r\n        this.setState({ teams: teams })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <button className='button btn-savechanges' onClick={this.handleSaveChanges}>Save Changes</button> */}\r\n                <div className='teambuilder'>\r\n                    <span className='teamview'>\r\n                        {this.state.showNewTeamBtn ? <div><button onClick={() => this.handleNewTeam()} className='button btn-newteam'>New Team</button></div> : null}\r\n                        {this.state.showNewTeam ? <NewTeamForm handleNewTeamEnter={this.handleNewTeamEnter} handleNewTeamBlur={this.handleNewTeamBlur} /> : null}\r\n                        {this.state.teams.map((t, index) => {\r\n                            return <Team\r\n                                name={t.name} sets={t.sets}\r\n                                handleClick={() => this.handleTeamClick(index)}\r\n                                handleDelete={() => this.handleDeleteTeam(index)}\r\n                                isActive={index == this.state.activeTeamIndex ? true : false}\r\n                            />\r\n                        })}\r\n                    </span>\r\n\r\n                    {/* <span className='setview'>\r\n                            {this.state.showNewSetBtn && this.state.activeTeamIndex != null && this.state.teams[this.state.activeTeamIndex].sets.length <= 5 ?\r\n                                <div><button onClick={() => this.handleNewSet()} className='button btn-newteam'>New Set</button></div> : null}\r\n                            {this.state.showNewSet ? <NewSetForm handleNewSetEnter={this.handleNewSetEnter} handleNewSetBlur={this.handleNewSetBlur} /> : null}\r\n                            {this.state.activeTeamIndex != null ?\r\n                                this.state.teams[this.state.activeTeamIndex].sets != null ?\r\n                                    this.state.teams[this.state.activeTeamIndex].sets.map((s, index) => {\r\n                                        return <Set\r\n                                            key={s.set_id}\r\n                                            set={s}\r\n                                            handleClick={() => this.handleSetClick(index)}\r\n                                            handleDelete={() => this.handleDeleteSet(index)}\r\n                                            editSet={(newSet) => this.editSet(index, newSet)}\r\n                                            isActive={index == this.state.activeSetIndex ? true : false}\r\n                                            moves={this.state.moves}\r\n                                        />\r\n               \r\n                                    }) : null\r\n                                : null}\r\n                    </span> */}\r\n                    {this.state.activeTeamIndex != null && this.state.teams[this.state.activeTeamIndex] != null ?\r\n                        <SetView sets={this.state.teams[this.state.activeTeamIndex].sets}/>\r\n                        : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleSaveChanges = () => {\r\n        let newTeams = []\r\n        let newSets = []\r\n        let oldTeams = []\r\n        let oldSets = []\r\n\r\n        this.state.teams.forEach(t => {\r\n            if (t.id == null) {\r\n                newTeams.push({ name: t.name })\r\n                t.sets.forEach(s => {\r\n                    newSets.push(s)\r\n                })\r\n            }\r\n            else {\r\n                oldTeams.push({ id: t.id, name: t.name })\r\n                t.sets.forEach(s => {\r\n                    if (s.set_id == null && s.set_id != -1)\r\n                        newSets.push(s)\r\n                    else\r\n                        oldSets.push(s)\r\n                })\r\n            }\r\n        })\r\n\r\n        let oldTeamIds = oldTeams.map(t => {\r\n            return t.id\r\n        })\r\n        let deletedTeams = []\r\n        this.props.teamNames.forEach(t => {\r\n            if (!oldTeamIds.includes(t.id))\r\n                deletedTeams.push({ id: t.id })\r\n        })\r\n\r\n        let oldSetIds = oldSets.map(s => {\r\n            return s.set_id\r\n        })\r\n        let deletedSets = []\r\n        this.props.sets.forEach(s => {\r\n            if (!oldSetIds.includes(s.set_id))\r\n                deletedSets.push({ id: s.set_id })\r\n        })\r\n\r\n\r\n        this.props.handleSaveChanges(newTeams, newSets, oldTeams, oldSets, deletedTeams, deletedSets)\r\n    }\r\n\r\n    handleSpeciesField = () => {\r\n\r\n    }\r\n\r\n    handleAbilityField = () => {\r\n\r\n    }\r\n\r\n    handleNatureField = () => {\r\n\r\n    }\r\n\r\n    handleItemField = () => {\r\n\r\n    }\r\n\r\n    handleMoveField = () => {\r\n\r\n    }\r\n\r\n    handleNewTeamBlur = (event) => {\r\n        this.setState({ showNewTeam: false, showNewTeamBtn: true })\r\n    }\r\n\r\n    handleNewTeam() {\r\n        this.setState({ showNewTeamBtn: false, showNewTeam: true })\r\n    }\r\n\r\n    handleTeamClick = (clickedTeamIndex) => {\r\n        this.setState({ activeTeamIndex: clickedTeamIndex })\r\n    }\r\n\r\n    handleDeleteTeam = (clickedTeamIndex) => {\r\n        let newTeams = this.state.teams.filter((t, index) => index !== clickedTeamIndex)\r\n        this.setState({\r\n            activeTeamIndex: null,\r\n            teams: newTeams\r\n        })\r\n    }\r\n\r\n    handleNewTeamEnter = (event) => {\r\n        if (event.key === 'Enter') {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            console.log('enter');\r\n            let newName = event.target.value\r\n\r\n            this.setState(prevState => {\r\n                return {\r\n                    showNewTeam: false,\r\n                    showNewTeamBtn: true,\r\n                    activeTeamIndex: 0,\r\n                    teams: [{ id: null, name: newName, sets: [] }, ...prevState.teams]\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    editSet = (setIndex, newSet) => {\r\n        let newTeams = this.state.teams.map((t, tIndex) => {\r\n            if (tIndex === this.state.activeTeamIndex) {\r\n                return {\r\n                    id: t.id,\r\n                    name: t.name,\r\n                    sets: this.state.teams[tIndex].sets.map((s, sIndex) => {\r\n                        if (sIndex === setIndex) {\r\n                            return {\r\n                                set_id: newSet.set_id,\r\n                                species: newSet.species,\r\n                                nickname: newSet.nickname,\r\n                                nature: newSet.nature,\r\n                                ability: newSet.ability,\r\n                                item: newSet.item,\r\n                                move_1: newSet.move_1,\r\n                                move_2: newSet.move_2,\r\n                                move_3: newSet.move_3,\r\n                                move_4: newSet.move_4,\r\n                                hp_evs: newSet.hp_evs,\r\n                                atk_evs: newSet.atk_evs,\r\n                                def_evs: newSet.def_evs,\r\n                                spa_evs: newSet.spa_evs,\r\n                                spd_evs: newSet.spd_evs,\r\n                                spe_evs: newSet.spe_evs,\r\n                                level: newSet.level,\r\n                                sprite_link: newSet.sprite_link,\r\n                                team_name: newSet.team_name,\r\n                                team_id: newSet.team_id\r\n                            }\r\n                        }\r\n                        else\r\n                            return s\r\n                    })\r\n                }\r\n            }\r\n            else\r\n                return t\r\n        })\r\n        this.setState({ teams: newTeams })\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { fetchTeams, createTeam, deleteTeam, setActiveTeam } from '../../actions/userteamsActions'\r\nimport LoadSpinner from '../tools/LoadSpinner'\r\nimport TeamView from './TeamView'\r\nimport NewTeamForm from './NewTeamForm'\r\nimport Team from './Team'\r\nimport SetView from './SetView'\r\nimport styles from './teambuilder-styles.css'\r\n\r\nclass TeamTesting extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            activeTeamIndex: 0, // index of team we are currently editing\r\n            activeSetIndex: null,\r\n            showNewTeamBtn: true,\r\n            showNewTeam: false,\r\n            showNewSetBtn: true,\r\n            showNewSet: false,\r\n            showTypeahead: false,\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.props.fetchTeams()\r\n    }\r\n\r\n    render() {\r\n        let content = this.props.fetching ?\r\n            <LoadSpinner/> :\r\n            <div>\r\n                {/* <button className='button btn-savechanges' onClick={this.handleSaveChanges}>Save Changes</button> */}\r\n                <div className='teambuilder'>\r\n                    <span className='teamview'>\r\n                        {this.state.showNewTeamBtn ? <div><button onClick={() => this.handleNewTeam()} className='button btn-newteam'>New Team</button></div> : null}\r\n                        {this.state.showNewTeam ? <NewTeamForm handleNewTeamEnter={this.handleNewTeamEnter} handleNewTeamBlur={this.handleNewTeamBlur} /> : null}\r\n                        {this.props.teams.map((t, index) => {\r\n                            return <Team\r\n                                name={t.name} sets={t.sets}\r\n                                handleClick={() => this.handleTeamClick(index)}\r\n                                handleDelete={() => this.handleDeleteTeam(index)}\r\n                                isActive={index == this.state.activeTeamIndex ? true : false}\r\n                            />\r\n                        })}\r\n                    </span>\r\n\r\n                    {this.props.activeTeam != null ?\r\n                        <SetView sets={this.props.activeTeam.sets}/>\r\n                        : null}\r\n                </div>\r\n            </div>\r\n        \r\n        return content\r\n    }\r\n\r\n    handleNewTeamBlur = (event) => {\r\n        this.setState({ showNewTeam: false, showNewTeamBtn: true })\r\n    }\r\n\r\n    handleNewTeam() {\r\n        this.setState({ showNewTeamBtn: false, showNewTeam: true })\r\n    }\r\n\r\n    handleTeamClick = (clickedTeamIndex) => {\r\n        this.setState({ activeTeamIndex: clickedTeamIndex })\r\n        this.props.setActiveTeam(this.props.teams[clickedTeamIndex])\r\n    }\r\n\r\n    handleDeleteTeam = (clickedTeamIndex) => {\r\n        this.props.deleteTeam(this.props.teams[clickedTeamIndex].id)\r\n        this.setState({\r\n            activeTeamIndex: null\r\n        })\r\n    }\r\n\r\n    handleNewTeamEnter = (event) => {\r\n        if (event.key === 'Enter') {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            this.props.createTeam(event.target.value) // new team name\r\n            this.setState({\r\n                showNewTeam: false,\r\n                showNewTeamBtn: true\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nTeamTesting.propTypes = {\r\n    fetchTeams: PropTypes.func.isRequired,\r\n    teams: PropTypes.array.isRequired,\r\n    fetching: PropTypes.bool.isRequired,\r\n    createTeam: PropTypes.func.isRequired,\r\n    deleteTeam: PropTypes.func.isRequired,\r\n    activeTeam: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    teams: state.userteams.items,\r\n    fetching: state.userteams.fetching,\r\n    activeTeam: state.userteams.activeTeam,\r\n})\r\n\r\nexport default connect(mapStateToProps, { fetchTeams, createTeam, deleteTeam, setActiveTeam })(TeamTesting)","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Posts from './Posts'\r\nimport PostForm from './PostForm'\r\nimport TeamTesting from './team-builder/TeamTesting'\r\n\r\nexport default function Home() {\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            <PostForm/>\r\n            <hr/>\r\n            <Posts/>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { fetchItems } from '../../actions/itemsActions'\r\nimport { fetchNatures } from '../../actions/naturesActions'\r\nimport { fetchAbilities } from '../../actions/abilitiesActions'\r\nimport TeamView from './TeamView'\r\nimport SetView from './SetView'\r\nimport CalcView from './CalcView'\r\nimport LoadSpinner from '../tools/LoadSpinner'\r\nimport styles from './teambuilder-styles.css'\r\n\r\nconst username = 'ana'\r\nconst getSetsEndpoint = '/api/getUserSets/?username='\r\nconst updateSetsEndpoint = \"/api/updateUserSets\"\r\n\r\nvar axios = require('axios')\r\n\r\nclass TeamBuilder extends Component {\r\n    componentWillMount() {\r\n        if (!this.props.itemsFetched && !this.props.itemsFetching)\r\n            this.props.fetchItems()   \r\n\r\n        if (!this.props.naturesFetched && !this.props.naturesFetching)\r\n            this.props.fetchNatures()   \r\n\r\n        // if (!this.props.abilitiesFetched && !this.props.abilitiesFetching)\r\n        //     this.props.fetchAbilities()   \r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isFetching: true,\r\n            teamNames: null,\r\n            sets: null,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({isFetching: true})\r\n        this.fetchData()\r\n    }\r\n\r\n    async fetchData() {\r\n        await Promise.all([\r\n            await fetch (getSetsEndpoint + username)\r\n                .then(response => response.json())\r\n                .then(json => {\r\n                    console.log(json)\r\n                    this.setState({\r\n                        teamNames: json.results.teamNames,\r\n                        sets: json.results.sets\r\n                    })\r\n                })\r\n        ])\r\n            .then(this.setState({isFetching: false})\r\n            )\r\n            .catch(err => {\r\n                console.log(err)\r\n            });\r\n    }\r\n\r\n    saveChanges = async (newTeams, newSets, oldTeams, oldSets, deletedTeams, deletedSets) => {\r\n        this.setState({isFetching: true})\r\n        await axios\r\n            .post(updateSetsEndpoint, {\r\n                username: username,\r\n                newTeams: newTeams,\r\n                newSets: newSets,\r\n                oldTeams: oldTeams,\r\n                oldSets: oldSets,\r\n                deletedTeams: deletedTeams,\r\n                deletedSets: deletedSets\r\n            })\r\n        .then(await this.setState({isFetching: false}))\r\n        .then(await window.location.reload(false))\r\n        .catch(e => {\r\n            console.error('error', e);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let content =   this.props.itemsFetching || \r\n                        this.props.abilitiesFetching ||\r\n                        this.props.naturesFetching || \r\n                        this.state.isFetching ?\r\n                    <LoadSpinner/> :\r\n                    <TeamView \r\n                        sets={this.state.sets}\r\n                        teamNames={this.state.teamNames}\r\n                        abilities={this.props.abilities}\r\n                        natures={this.props.natures}\r\n                        items={this.props.items}\r\n                        handleSaveChanges={this.saveChanges}\r\n                    />\r\n\r\n        return content \r\n    }\r\n}\r\n\r\nTeamBuilder.propTypes = {\r\n    fetchItems: PropTypes.func.isRequired,\r\n    items: PropTypes.array.isRequired,\r\n    itemsFetching: PropTypes.bool.isRequired,\r\n    itemsFetched: PropTypes.bool.isRequired,\r\n\r\n    fetchNatures: PropTypes.func.isRequired,\r\n    natures: PropTypes.array.isRequired,\r\n    naturesFetching: PropTypes.bool.isRequired,\r\n    naturesFetched: PropTypes.bool.isRequired,\r\n\r\n    fetchAbilities: PropTypes.func.isRequired,\r\n    abilities: PropTypes.array.isRequired,\r\n    abilitiesFetching: PropTypes.bool.isRequired,\r\n    abilitiesFetched: PropTypes.bool.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    items: state.items.items,\r\n    itemsFetching: state.items.fetching,\r\n    itemsFetched: state.items.fetched,\r\n\r\n    natures: state.natures.items,\r\n    movesFetching: state.natures.fetching,\r\n    naturesFetched: state.natures.fetched,\r\n\r\n    abilities: state.abilities.items,\r\n    abilitiesFetching: state.abilities.fetching,\r\n    abilitiesFetched: state.abilities.fetched,\r\n})\r\n\r\nexport default connect(mapStateToProps, { fetchItems, fetchAbilities, fetchNatures })(TeamBuilder)","import { FETCH_ITEMS, LOADING_ITEMS } from './types'\r\n\r\nconst fetchItemsUrl = \"/api/getAllItems\"\r\n\r\nexport const fetchItems = () => dispatch => {\r\n    dispatch({\r\n        type: LOADING_ITEMS,\r\n        payload: true\r\n    })\r\n    fetch(fetchItemsUrl)\r\n    .then(res => {\r\n        if (!res.ok)\r\n            throw new Error(`status ${res.status}`);\r\n        return res.json();\r\n    })\r\n    .then(items => {\r\n        dispatch({\r\n            type: FETCH_ITEMS,\r\n            payload: items.results\r\n        })\r\n        dispatch({\r\n            type: LOADING_ITEMS,\r\n            payload: false\r\n        })\r\n    })\r\n    .catch(e => {\r\n        console.log(`API call failed: ${e}`);\r\n    })\r\n}","import { FETCH_ABILITIES, LOADING_ABILITIES } from './types'\r\n\r\nconst fetchAbilitiesUrl = \"/api/getAllAbilities\"\r\n\r\nexport const fetchAbilities = () => dispatch => {\r\n    dispatch({\r\n        type: LOADING_ABILITIES,\r\n        payload: true\r\n    })\r\n    fetch(fetchAbilitiesUrl)\r\n    .then(res => {\r\n        if (!res.ok)\r\n            throw new Error(`status ${res.status}`);\r\n        return res.json();\r\n    })\r\n    .then(abilities => {\r\n        dispatch({\r\n            type: FETCH_ABILITIES,\r\n            payload: abilities.results\r\n        })\r\n        dispatch({\r\n            type: LOADING_ABILITIES,\r\n            payload: false\r\n        })\r\n    })\r\n    .catch(e => {\r\n        console.log(`API call failed: ${e}`);\r\n    })\r\n}","import { FETCH_NATURES, LOADING_NATURES } from './types'\r\n\r\nconst fetchNaturesUrl = \"/api/getAllNatures\"\r\n\r\nexport const fetchNatures = () => dispatch => {\r\n    dispatch({\r\n        type: LOADING_NATURES,\r\n        payload: true\r\n    })\r\n    fetch(fetchNaturesUrl)\r\n    .then(res => {\r\n        if (!res.ok)\r\n            throw new Error(`status ${res.status}`);\r\n        return res.json();\r\n    })\r\n    .then(natures => {\r\n        dispatch({\r\n            type: FETCH_NATURES,\r\n            payload: natures.results\r\n        })\r\n        dispatch({\r\n            type: LOADING_NATURES,\r\n            payload: false\r\n        })\r\n    })\r\n    .catch(e => {\r\n        console.log(`API call failed: ${e}`);\r\n    })\r\n}","import React from 'react'\r\nimport { calculate } from '@smogon/calc'\r\n\r\nexport default function DamageCalculator() {\r\n    return (\r\n        <div>\r\n            I will be the damage calculator page\r\n        </div>\r\n    )\r\n}","import React, { useCallback, useEffect, useState, createRef } from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next'\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport { Button } from 'react-bootstrap'\r\nimport { titleFormatter as title } from '../Utilities'\r\nimport styles from './pokedexstyles.css'\r\n\r\nexport default function PokemonTable(props) {\r\n    const tableRef = React.createRef();\r\n\r\n    const { SearchBar } = Search;\r\n    const columns = [{\r\n        classes: 'col-style',\r\n        dataField: 'id',\r\n        text: 'Dex #',\r\n        sort: true,\r\n        formatter: spriteFormatter\r\n    }, {\r\n        classes: 'col-style',\r\n        dataField: 'name',\r\n        text: 'Species',\r\n        formatter: speciesFormatter,\r\n        sort: true\r\n    }, {\r\n        classes: 'col-style',\r\n        dataField: 'ability_1',\r\n        text: 'Ability',\r\n        formatter: abilityFormatter\r\n    }, {\r\n        classes: 'col-style',\r\n        dataField: 'hidden_ability',\r\n        text: 'Hidden Ability',\r\n        formatter: haFormatter\r\n    }, {\r\n        classes: 'col-style',\r\n        dataField: 'base_hp',\r\n        text: 'HP',\r\n        sort: true\r\n    }, {\r\n        classes: 'col-style',\r\n        dataField: 'base_atk',\r\n        text: 'ATK',\r\n        sort: true\r\n    }, {\r\n        classes: 'col-style',\r\n        dataField: 'base_def',\r\n        text: 'DEF',\r\n        sort: true\r\n    }, {\r\n        classes: 'col-style',\r\n        dataField: 'base_spa',\r\n        text: 'SPA',\r\n        sort: true\r\n    }, {\r\n        classes: 'col-style',\r\n        dataField: 'base_spd',\r\n        text: 'SPD',\r\n        sort: true\r\n    }, {\r\n        classes: 'col-style',\r\n        dataField: 'base_spe',\r\n        text: 'SPE',\r\n        sort: true\r\n    }]\r\n\r\n    function spriteFormatter(cell, row) {\r\n        return <><img src={row.sprite_link} />{cell}</>\r\n    }\r\n\r\n    function speciesFormatter(cell, row) {\r\n        return (\r\n            <>\r\n                {cell} <br />\r\n                <div className=\"type-icon\" style={{ backgroundColor: row.type_1_color }}>{row.type_1}</div>\r\n                {row.type_2 != null ?\r\n                    <><div className=\"type-icon\"\r\n                        style={{ backgroundColor: row.type_2_color }}>{row.type_2}</div></> : ''}\r\n            </>\r\n        )\r\n    }\r\n\r\n    function abilityFormatter(cell, row) {\r\n        return (\r\n            <div>{row.ability_1}<br />{row.ability_2}</div>\r\n        )\r\n    }\r\n\r\n    function haFormatter(cell) {\r\n        return <>{cell}</>\r\n    }\r\n    \r\n    const customTotal = (from, to, size) => (\r\n        <span className=\"react-bootstrap-table-pagination-total\">\r\n            Showing { from } to { to } of { size } Results\r\n        </span>\r\n    );\r\n    \r\n    const options = {\r\n    paginationSize: 4,\r\n    pageStartIndex: 0,\r\n    // alwaysShowAllBtns: true, // Always show next and previous button\r\n    // withFirstAndLast: false, // Hide the going to First and Last page button\r\n    // hideSizePerPage: true, // Hide the sizePerPage dropdown always\r\n    // hidePageListOnlyOnePage: true, // Hide the pagination list when only one page\r\n    firstPageText: 'First',\r\n    prePageText: 'Back',\r\n    nextPageText: 'Next',\r\n    lastPageText: 'Last',\r\n    nextPageTitle: 'First page',\r\n    prePageTitle: 'Pre page',\r\n    firstPageTitle: 'Next page',\r\n    lastPageTitle: 'Last page',\r\n    showTotal: true,\r\n    paginationTotalRenderer: customTotal,\r\n    disablePageTitle: true,\r\n    sizePerPageList: [{\r\n        text: '75', value: 75\r\n    }, {\r\n        text: '200', value: 200\r\n    }, {\r\n        text: 'All', value: props.pokemon.length\r\n    }] // A numeric array is also available. the purpose of above example is custom the text\r\n    };\r\n\r\n    return (\r\n        <div className='pokedex-wrapper-class'>\r\n            <span className='table-wrapper'>\r\n                <ToolkitProvider\r\n                    keyField=\"id\"\r\n                    data={props.pokemon}\r\n                    columns={columns}\r\n                    search\r\n                    >\r\n                    {props => (\r\n                        <React.Fragment>\r\n                            <br />\r\n                            <SearchBar {...props.searchProps} />\r\n                            <hr />\r\n                            <BootstrapTable  {...props.baseProps}\r\n                                ref={n => tableRef.current = n}\r\n                                condensed\r\n                                striped\r\n                                bordered={false}\r\n                                columnStyle=\"col-style\"\r\n                                headerStyle={{position: 'fixed'}}\r\n                                pagination={ paginationFactory(options) }\r\n\r\n                            />\r\n                        </React.Fragment>\r\n                    )}\r\n                </ToolkitProvider>\r\n            </span>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { fetchPokemons } from '../../actions/pokemonsActions'\r\nimport LoadSpinner from '../tools/LoadSpinner'\r\nimport PokemonTable from './PokemonTable';\r\n\r\nclass Pokedex extends Component {\r\n    componentWillMount() {\r\n        if (!this.props.fetched && !this.props.fetching)\r\n            this.props.fetchPokemons()\r\n    }\r\n\r\n    render() {\r\n        let content = this.props.fetching ?\r\n            <LoadSpinner/> :\r\n            <PokemonTable pokemon={this.props.pokemons}/>\r\n\r\n        return content\r\n    } \r\n}\r\n\r\nPokedex.propTypes = {\r\n    fetchPokemons: PropTypes.func.isRequired,\r\n    pokemons: PropTypes.array.isRequired,\r\n    fetching: PropTypes.bool.isRequired,\r\n    fetched: PropTypes.bool.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    pokemons: state.pokemons.items,\r\n    fetching: state.pokemons.fetching,\r\n    fetched: state.pokemons.fetched\r\n})\r\n\r\nexport default connect(mapStateToProps, { fetchPokemons })(Pokedex)","import React, { useCallback, useEffect, useState, createRef } from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next'\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport { Button } from 'react-bootstrap'\r\nimport { titleFormatter as title } from '../Utilities'\r\nimport styles from './pokedexstyles.css'\r\n\r\nexport default function MoveTable(props) {\r\n    const tableRef = React.createRef();\r\n\r\n    const { SearchBar } = Search;\r\n    const columns = [{\r\n        classes: 'col-style',\r\n        dataField: 'name',\r\n        text: 'Move',\r\n        formatter: typeFormatter,\r\n        sort: true\r\n    }, {\r\n        classes: 'col-style',\r\n        dataField: 'category',\r\n        text: 'Category',\r\n    }, {\r\n        classes: 'col-style',\r\n        dataField: 'power',\r\n        text: 'Power',\r\n        sort: true,\r\n        formatter: numberFormatter\r\n    }, {\r\n        classes: 'col-style',\r\n        dataField: 'accuracy',\r\n        text: 'Accuracy',\r\n        sort: true,\r\n        formatter: numberFormatter\r\n    }, {\r\n        classes: 'col-style',\r\n        dataField: 'pp',\r\n        text: 'PP',\r\n        formatter: numberFormatter,\r\n        sort: true\r\n    }, {\r\n        classes: 'col-style',\r\n        dataField: 'priority',\r\n        text: 'Priority',\r\n        sort: true,\r\n        formatter: numberFormatter\r\n    }]\r\n\r\n    function typeFormatter(cell, row) {\r\n        return (\r\n            <>\r\n                {cell} <br />\r\n                <div className=\"type-icon\" style={{ backgroundColor: row.type_color }}>{row.type}</div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    function numberFormatter(cell, row) {\r\n        return cell == null ? 'N/A' : cell\r\n    }\r\n\r\n    const customTotal = (from, to, size) => (\r\n        <span className=\"react-bootstrap-table-pagination-total\">\r\n            Showing { from } to { to } of { size } Results\r\n        </span>\r\n    );\r\n    \r\n    const options = {\r\n    paginationSize: 4,\r\n    pageStartIndex: 0,\r\n    // alwaysShowAllBtns: true, // Always show next and previous button\r\n    // withFirstAndLast: false, // Hide the going to First and Last page button\r\n    // hideSizePerPage: true, // Hide the sizePerPage dropdown always\r\n    // hidePageListOnlyOnePage: true, // Hide the pagination list when only one page\r\n    firstPageText: 'First',\r\n    prePageText: 'Back',\r\n    nextPageText: 'Next',\r\n    lastPageText: 'Last',\r\n    nextPageTitle: 'First page',\r\n    prePageTitle: 'Pre page',\r\n    firstPageTitle: 'Next page',\r\n    lastPageTitle: 'Last page',\r\n    showTotal: true,\r\n    paginationTotalRenderer: customTotal,\r\n    disablePageTitle: true,\r\n    sizePerPageList: [{\r\n        text: '75', value: 75\r\n    }, {\r\n        text: '200', value: 200\r\n    }, {\r\n        text: 'All', value: props.moves.length\r\n    }] // A numeric array is also available. the purpose of above example is custom the text\r\n    };\r\n\r\n    return (\r\n        <div className='pokedex-wrapper-class'>\r\n            <span className='table-wrapper'>\r\n                <ToolkitProvider\r\n                    keyField=\"id\"\r\n                    data={props.moves}\r\n                    columns={columns}\r\n                    search\r\n                >\r\n                    {props => (\r\n                        <React.Fragment>\r\n                            <br />\r\n                            <SearchBar {...props.searchProps} />\r\n                            <hr />\r\n                            <BootstrapTable  {...props.baseProps}\r\n                                ref={n => tableRef.current = n}\r\n                                condensed\r\n                                striped\r\n                                bordered={false}\r\n                                columnStyle=\"col-style\"\r\n                                pagination={ paginationFactory(options) }\r\n\r\n                            />\r\n                        </React.Fragment>\r\n                    )}\r\n                </ToolkitProvider>\r\n            </span>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { fetchMoves } from '../../actions/movesActions'\r\nimport LoadSpinner from '../tools/LoadSpinner'\r\nimport MoveTable from './MoveTable';\r\n\r\nclass Movedex extends Component {\r\n    componentWillMount() {\r\n        if (!this.props.fetched && !this.props.fetching)\r\n            this.props.fetchMoves()\r\n    }\r\n\r\n    render() {\r\n        let content = this.props.fetching ?\r\n            <LoadSpinner/> :\r\n            <MoveTable moves={this.props.moves}/>\r\n\r\n        return content\r\n    } \r\n}\r\n\r\nMovedex.propTypes = {\r\n    fetchMoves: PropTypes.func.isRequired,\r\n    moves: PropTypes.array.isRequired,\r\n    fetching: PropTypes.bool.isRequired,\r\n    fetched: PropTypes.bool.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    moves: state.moves.items,\r\n    fetching: state.moves.fetching,\r\n    fetched: state.moves.fetched\r\n})\r\n\r\nexport default connect(mapStateToProps, { fetchMoves })(Movedex)","import React, { useCallback, useEffect, useState } from 'react';\nimport store from './store'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport Header from './components/Header'\nimport logo from './logo.svg';\nimport './App.css';\nimport FetchPokedexData from './components/FetchPokedexData'\nimport Home from './components/Home'\nimport TeamBuilder from './components/team-builder/TeamBuilder'\nimport DamageCalculator from './components/DamageCalculator';\nimport Pokedex from './components/pokedex/Pokedex';\nimport Movedex from './components/pokedex/Movedex'\n\n\n// TODO: might be able to use a context here to get pokedex info all the way down to set editor\n\nexport default function App() {\n    \n  // standard react-router-dom site layout\n  return (\n    <div className=\"App\">\n\n      <Provider store={store}>\n        <Router>\n          <Header/>\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/home' component={Home} />\n            <Route path='/pokedex' component={Pokedex} />\n            <Route path='/movedex' component={Movedex} />\n            <Route path='/team-builder' component={TeamBuilder} />\n        \n            //<Route path='/damage-calculator' component={DamageCalculator} />\n            <Route path='/insertPokedexData' component={FetchPokedexData} />\n          </Switch>\n        </Router>\n      </Provider>\n\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\r\n    titleFormatter: (str) => {\r\n        if (str == null)\r\n            return ''\r\n\r\n        str = str.charAt(0).toUpperCase() + str.slice(1);\r\n        for (var i = 1; i < str.length; i++) {\r\n            if (str.charAt(i) == ' ') \r\n                str = str.slice(0, i+1) + str.charAt(i+1).toUpperCase() + str.slice(i+2)\r\n            \r\n            else if (str.charAt(i) == '-')\r\n                str = str.slice(0, i) + ' ' + str.charAt(i+1).toUpperCase() + str.slice(i+2)\r\n        }\r\n        return str\r\n    }\r\n}"],"sourceRoot":""}